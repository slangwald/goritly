// Generated by CoffeeScript 1.6.2
(function() {
  $(document).ready(function() {
    var area, area2, data, div, dots, formatTime, g, height, line, lineData, margin, maxValueBubble, maxValueX, maxValueY, parseDate, scaleLeads, svg, width, x, xAxis, y, yAxis;

    if ($('#bar-chart')) {
      lineData = [
        {
          "date": "2013-03-04",
          "mspend": 20,
          "clv": [
            10,
            10,
            10
          }
      ];
      
      data = lineData;
var n = 3, // number of layers
    m = data.length, // number of samples per layer
    stack = d3.layout.stack(),
    layers = stack(d3.range(n).map(function() { return bumpLayer(m, .1); })),
    yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });
    console.log(bumpLayer(m, .1))
    console.log(layers);

    data.forEach(function(d){console.log(d.detail)});

var margin = {top: 40, right: 10, bottom: 20, left: 10},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .domain(d3.range(m))
    .rangeRoundBands([0, width], .08);

var y = d3.scale.linear()
    .domain([0, yStackMax])
    .range([height, 0]);

var color = d3.scale.linear()
    .domain([0, n - 1])
    .range(["#aad", "#556"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .tickSize(0)
    .tickPadding(6)
    .orient("bottom");

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var layer = svg.selectAll(".layer")
    .data(layers)
  .enter().append("g")
    .attr("class", "layer")
    .style("fill", function(d, i) { return color(i); });

var rect = layer.selectAll("rect")
    .data(function(d) { return d; })
  .enter().append("rect")
    .attr("x", function(d) { return x(d.x); })
    .attr("y", height)
    .attr("width", x.rangeBand())
    .attr("height", 0);

rect.transition()
    .delay(function(d, i) { return i * 10; })
    .attr("y", function(d) { return y(d.y0 + d.y); })
    .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); });

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

d3.selectAll("input").on("change", change);

var timeout = setTimeout(function() {
  d3.select("input[value=\"grouped\"]").property("checked", true).each(change);
}, 2000);

function change() {
  clearTimeout(timeout);
  if (this.value === "grouped") transitionGrouped();
  else transitionStacked();
}

function transitionGrouped() {
  y.domain([0, yGroupMax]);

  rect.transition()
      .duration(500)
      .delay(function(d, i) { return i * 10; })
      .attr("x", function(d, i, j) { return x(d.x) + x.rangeBand() / n * j; })
      .attr("width", x.rangeBand() / n)
    .transition()
      .attr("y", function(d) { return y(d.y); })
      .attr("height", function(d) { return height - y(d.y); });
}

function transitionStacked() {
  y.domain([0, yStackMax]);

  rect.transition()
      .duration(500)
      .delay(function(d, i) { return i * 10; })
      .attr("y", function(d) { return y(d.y0 + d.y); })
      .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
    .transition()
      .attr("x", function(d) { return x(d.x); })
      .attr("width", x.rangeBand());
}

// Inspired by Lee Byron's test data generator.
function bumpLayer(n, o) {

  function bump(a) {
    var x = 1 / (.1 + Math.random()),
        y = 2 * Math.random() - .5,
        z = 10 / (.1 + Math.random());
    for (var i = 0; i < n; i++) {
      var w = (i / n - y) * z;
      a[i] += x * Math.exp(-w * w);
    }
  }

  var a = [], i;
  for (i = 0; i < n; ++i) a[i] = o + o * Math.random();
  for (i = 0; i < 5; ++i) bump(a);
  return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
}
  
    }
    if ($('#line-chart')) {
      lineData = [
        {
          "date": "2013-03-04",
          "weeks": 47,
          "detail": {
            "f": 16,
            "d": 16,
            "s": 16
          }
        }, {
          "date": "2013-03-05",
          "weeks": 46,
          "detail": {
            "f": 15,
            "d": 15,
            "s": 15
          }
        }, {
          "date": "2013-03-06",
          "weeks": 42,
          "detail": {
            "f": 14,
            "d": 14,
            "s": 14
          }
        }, {
          "date": "2013-03-07",
          "weeks": 40,
          "detail": {
            "f": 13,
            "d": 13,
            "s": 13
          }
        }, {
          "date": "2013-03-08",
          "weeks": 36,
          "detail": {
            "f": 12,
            "d": 12,
            "s": 12
          }
        }, {
          "date": "2013-03-09",
          "weeks": 35,
          "detail": {
            "f": 12,
            "d": 12,
            "s": 12
          }
        }, {
          "date": "2013-03-10",
          "weeks": 39,
          "detail": {
            "f": 13,
            "d": 13,
            "s": 13
          }
        }, {
          "date": "2013-03-11",
          "weeks": 44,
          "detail": {
            "f": 15,
            "d": 15,
            "s": 15
          }
        }, {
          "date": "2013-03-12",
          "weeks": 44,
          "detail": {
            "f": 15,
            "d": 15,
            "s": 15
          }
        }, {
          "date": "2013-03-13",
          "weeks": 39,
          "detail": {
            "f": 13,
            "d": 13,
            "s": 13
          }
        }, {
          "date": "2013-03-14",
          "weeks": 34,
          "detail": {
            "f": 11,
            "d": 11,
            "s": 11
          }
        }, {
          "date": "2013-03-15",
          "weeks": 29,
          "detail": {
            "f": 10,
            "d": 10,
            "s": 10
          }
        }, {
          "date": "2013-03-16",
          "weeks": 40,
          "detail": {
            "f": 13,
            "d": 13,
            "s": 13
          }
        }, {
          "date": "2013-03-17",
          "weeks": 43,
          "detail": {
            "f": 14,
            "d": 14,
            "s": 14
          }
        }, {
          "date": "2013-03-18",
          "weeks": 47,
          "detail": {
            "f": 16,
            "d": 16,
            "s": 16
          }
        }, {
          "date": "2013-03-19",
          "weeks": 51,
          "detail": {
            "f": 17,
            "d": 17,
            "s": 17
          }
        }, {
          "date": "2013-03-20",
          "weeks": 50,
          "detail": {
            "f": 17,
            "d": 17,
            "s": 17
          }
        }, {
          "date": "2013-03-21",
          "weeks": 55,
          "detail": {
            "f": 18,
            "d": 18,
            "s": 18
          }
        }, {
          "date": "2013-03-22",
          "weeks": 55,
          "detail": {
            "f": 18,
            "d": 18,
            "s": 18
          }
        }, {
          "date": "2013-03-23",
          "weeks": 53,
          "detail": {
            "f": 18,
            "d": 18,
            "s": 18
          }
        }, {
          "date": "2013-03-24",
          "weeks": 48,
          "detail": {
            "f": 16,
            "d": 16,
            "s": 16
          }
        }, {
          "date": "2013-03-25",
          "weeks": 53,
          "detail": {
            "f": 18,
            "d": 18,
            "s": 18
          }
        }
      ];
      data = lineData;
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
      };
      width = 970 - margin.left - margin.right;
      height = 500 - margin.top - margin.bottom;
      parseDate = d3.time.format("%Y-%m-%d").parse;
      x = d3.time.scale().range([0, width]);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left").tickSize(-width, 0, 0).tickFormat(function(d, i) {
        if (i > 0) {
          return d + " wks. ";
        }
      });
      area = d3.svg.area().x(function(d) {
        return x(parseDate(d.date));
      }).y0(height).y1(function(d) {
        return y(d.weeks);
      }).interpolate("monotone");
      area2 = d3.svg.area().x(function(d) {
        return x(parseDate(d.date));
      }).y0(height).y1(function(d) {
        return y(+d.weeks);
      });
      svg = d3.select("#line-chart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      x.domain(d3.extent(data, function(d) {
        return parseDate(d.date);
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return +d.weeks;
        }) + 20
      ]);
      formatTime = d3.time.format("%Y-%m-%d");
      div = d3.select("body").append("div").attr('class', 'tooltipD3');
      svg.append("g").attr("class", "y axis").call(yAxis);
      svg.append("path").datum(data).attr("class", "area").attr("d", area);
      line = d3.svg.line().x(function(d) {
        return x(parseDate(d.date));
      }).y(function(d) {
        return y(d.weeks);
      }).interpolate("monotone");
      svg.append("path").datum(data).attr("class", "line").attr("d", line);
      dots = svg.selectAll("dot").data(data).enter().append("circle").attr("class", "infodot").attr("r", 8).attr("cx", function(d) {
        return x(parseDate(d.date));
      }).attr("cy", function(d) {
        return y(d.weeks);
      }).on("mouseover", function(d) {
        var pos;

        pos = $(this).position();
        $(this).attr('class', 'infodot-active');
        div.style('display', 'block');
        return div.html(formatTime(parseDate(d.date)) + '<br/><b>Total: ' + d.weeks + ' </b>' + '<br/>Facebook: ' + d.detail.f + '<br/>Display: ' + d.detail.d + '<br/>SEM: ' + d.detail.s).style("left", pos.left + "px").style("top", (pos.top + 20) + "px");
      }).on("mouseout", function(d) {
        $(this).attr('class', 'infodot');
        return div.style('display', 'none');
      });
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
    }
    if ($('#bubble-chart')) {
      lineData = [
        {
          'name': 'Display',
          'clv': 123,
          'cpl': 80,
          'leads': 100,
          'childs': [
            {
              'name': 'Adwords',
              'clv': 20,
              'cpl': 30,
              'leads': 20
            }
          ]
        }, {
          'name': 'Facebook',
          'clv': 70,
          'cpl': 30,
          'leads': 50,
          'childs': [
            {
              'name': 'Adwords',
              'clv': 20,
              'cpl': 30,
              'leads': 20
            }
          ]
        }, {
          'name': 'Display',
          'clv': 123,
          'cpl': 80,
          'leads': 100,
          'childs': [
            {
              'name': 'Adwords',
              'clv': 20,
              'cpl': 30,
              'leads': 20
            }
          ]
        }, {
          'name': 'Display',
          'clv': 123,
          'cpl': 80,
          'leads': 100,
          'childs': [
            {
              'name': 'Adwords',
              'clv': 20,
              'cpl': 30,
              'leads': 20
            }
          ]
        }
      ];
      maxValueX = 200;
      maxValueY = 200;
      maxValueBubble = 200;
      scaleLeads = function(value) {
        return +(value / maxValueBubble) * 100;
      };
      data = lineData;
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
      };
      width = 970 - margin.left - margin.right;
      height = 500 - margin.top - margin.bottom;
      x = d3.scale.linear().range([0, width]);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).tickFormat(function(d, i) {
        if (i > 0) {
          return d + " € ";
        }
      }).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left").tickSize(-width, 0, 0).tickFormat(function(d, i) {
        if (i > 0) {
          return d + " € ";
        }
      });
      svg = d3.select("#bubble-chart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      x.domain([0, maxValueX]);
      y.domain([0, maxValueY]);
      svg.append("g").attr("class", "y axis").call(yAxis);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      g = svg.append("svg:g").selectAll("scatter-dots").data(lineData).enter();
      g.append("svg:circle").attr("cy", function(d) {
        return y(+d.clv);
      }).attr("cx", function(d, i) {
        return x(+d.cpl);
      }).attr("r", function(d) {
        return scaleLeads(d.leads);
      }).style("opacity", 0.6);
      return g.append("text").attr("dx", function(d, i) {
        return x(+d.cpl);
      }).attr("dy", function(d, i) {
        return y(+d.clv);
      }).text(function(d) {
        return d.name + "(" + d.leads + ")";
      });
    }
  });

}).call(this);
